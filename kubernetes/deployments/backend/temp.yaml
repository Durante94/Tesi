---
# Source: database/templates/influxdb/influx.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: influx
  labels:
    name: influx
---
# Source: database/templates/telegraf/telegraf-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: telegraf-influx-secret
  namespace: influx
type: Opaque 
stringData:
  usernameInflux: fabrizio
  passwordInflux: influxpwdCollector
---
# Source: database/templates/telegraf/telegraf-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: influx
data:
  telegraf.conf: |
    # Configuration for telegraf agent
    [agent]
      ## Default data collection interval for all inputs
      interval = "1s"
      ## Rounds collection interval to 'interval'
      ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
      round_interval = true

      ## Telegraf will send metrics to outputs in batches of at most
      ## metric_batch_size metrics.
      ## This controls the size of writes that Telegraf sends to output plugins.
      metric_batch_size = 1000

      ## Maximum number of unwritten metrics per output.  Increasing this value
      ## allows for longer periods of output downtime without dropping metrics at the
      ## cost of higher maximum memory usage.
      metric_buffer_limit = 10000

      ## Collection jitter is used to jitter the collection by a random amount.
      ## Each plugin will sleep for a random time within jitter before collecting.
      ## This can be used to avoid many plugins querying things like sysfs at the
      ## same time, which can have a measurable effect on the system.
      collection_jitter = "0s"

      ## Default flushing interval for all outputs. Maximum flush_interval will be
      ## flush_interval + flush_jitter
      flush_interval = "1s"
      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "0s"

      ## By default or when set to "0s", precision will be set to the same
      ## timestamp order as the collection interval, with the maximum being 1s.
      ##   ie, when interval = "10s", precision will be "1s"
      ##       when interval = "250ms", precision will be "1ms"
      ## Precision will NOT be used for service inputs. It is up to each individual
      ## service input to set the timestamp at the appropriate precision.
      ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
      precision = "1ms"

      ## Log at debug level.
      debug = false
      ## Log only error level messages.
      quiet = false

      ## Log target controls the destination for logs and can be one of "file",
      ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
      ## is determined by the "logfile" setting.
      # logtarget = "file"

      ## Name of the file to be logged to when using the "file" logtarget.  If set to
      ## the empty string then logs are written to stderr.
      # logfile = "/var/log/telegraf/telegraf.log"

      ## The logfile will be rotated after the time interval specified.  When set
      ## to 0 no time based rotation is performed.  Logs are rotated only when
      ## written to, if there is no log activity rotation may be delayed.
      logfile_rotation_interval = "1d"

      ## The logfile will be rotated when it becomes larger than the specified
      ## size.  When set to 0 no size based rotation is performed.
      logfile_rotation_max_size = "200MB"

      ## Maximum number of rotated archives to keep, any older logs are deleted.
      ## If set to -1, no archives are removed.
      logfile_rotation_max_archives = 5

      ## Override default hostname, if empty use os.Hostname()
      hostname = ""
      ## If set to true, do no set the "host" tag in the telegraf agent.
      omit_hostname = true

    # Configuration for sending metrics to InfluxDB
    [[outputs.influxdb]]
      ## The full HTTP or UDP URL for your InfluxDB instance.
      ##
      # namepass = ["kafka_consumer"]
      ## Multiple URLs can be specified for a single cluster, only ONE of the
      ## urls will be written to each interval.
      # urls = ["unix:///var/run/influxdb.sock"]
      # urls = ["udp://127.0.0.1:8089"]
      # urls = ["http://127.0.0.1:8086"]
      url = "http://influxdb.influx.svc:8086"

      ## The target database for metrics; will be created as needed.
      ## For UDP url endpoint database needs to be configured on server side.
      database = "monitoring"

      ## The value of this tag will be used to determine the database.  If this
      ## tag is not set the 'database' option is used as the default.
      #database_tag = "webwams_OH"

      ## If true, the 'database_tag' will not be included in the written metric.
      #exclude_database_tag = true

      ## If true, no CREATE DATABASE queries will be sent.  Set to true when using
      ## Telegraf with a user without permissions to create databases or when the
      ## database already exists.
      skip_database_creation = false

      ## Name of existing retention policy to write to.  Empty string writes to
      ## the default retention policy.  Only takes effect when using HTTP.
      #retention_policy = ""

      ## The value of this tag will be used to determine the retention policy.  If this
      ## tag is not set the 'retention_policy' option is used as the default.
      # retention_policy_tag = ""

      ## If true, the 'retention_policy_tag' will not be included in the written metric.
      # exclude_retention_policy_tag = false

      ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
      ## Only takes effect when using HTTP.
      # write_consistency = "any"

      ## Timeout for HTTP messages.
      # timeout = "5s"

      ## HTTP Basic Auth
      username = "fabrizio"
      password = "influxpwdCollector"

      ## HTTP User-Agent
      # user_agent = "telegraf"

      ## UDP payload size is the maximum packet size to send.
      # udp_payload = "512B"

      ## Optional TLS Config for use on HTTP connections.
      # tls_ca = "/etc/telegraf/ca.pem"
      # tls_cert = "/etc/telegraf/cert.pem"
      # tls_key = "/etc/telegraf/key.pem"
      ## Use TLS but skip chain & host verification
      # insecure_skip_verify = false

      ## HTTP Proxy override, if unset values the standard proxy environment
      ## variables are consulted to determine which proxy, if any, should be used.
      # http_proxy = "http://corporate.proxy:3128"

      ## Additional HTTP headers
      # http_headers = {"X-Special-Header" = "Special-Value"}

      ## HTTP Content-Encoding for write request body, can be set to "gzip" to
      ## compress body or "identity" to apply no encoding.
      content_encoding = "identity"

      ## When true, Telegraf will output unsigned integers as unsigned values,
      ## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
      ## integer values.  Enabling this option will result in field type errors if
      ## existing data has been written.
      # influx_uint_support = false

        
      [[inputs.kafka_consumer]]
      brokers = ["local-cluster-kafka-bootstrap.kafka.svc:9092"]
      topics = ["data"]
      topic_tag = "value"
      version = "2.8.0"
      consumer_group = "_telegraf_InfluxDBv1.8_consumers"
      offset = "newest"
      max_message_len = 1000000
      data_format = "influx"
---
# Source: database/templates/influxdb/influx.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-pvc
  namespace: influx
spec:
  storageClassName: openebs-hostpath
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: database/templates/influxdb/influx.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb
  namespace: influx
spec:
  selector:
    app: influxdb
  ports:
  - name: http
    port: 8086
    targetPort: 8086
  type: ClusterIP
---
# Source: database/templates/influxdb/influx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  namespace: influx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec:
      containers:
      - name: influxdb
        image: influxdb:latest
        ports:
        - containerPort: 8086
        env:
          - name: DOCKER_INFLUXDB_INIT_RETENTION
            value: 2d
          - name: DOCKER_INFLUXDB_INIT_BUCKET
            value: monitoring
          - name: DOCKER_INFLUXDB_INIT_ORG
            value: tesi
          - name: DOCKER_INFLUXDB_INIT_MODE
            value: "setup"
          - name: DOCKER_INFLUXDB_INIT_USERNAME
            value: fabrizio
          - name: DOCKER_INFLUXDB_INIT_PASSWORD
            value: influxpwdCollector
        volumeMounts:
        - name: influxdb-data
          mountPath: /var/lib/influxdb
      volumes:
      - name: influxdb-data
        persistentVolumeClaim:
          claimName: influxdb-pvc
  strategy:
    type: Recreate
---
# Source: database/templates/telegraf/telegraf-deployment.yaml
apiVersion: apps/v1  
kind: Deployment
metadata:
  name: telegraf
  namespace: influx
spec:
  selector:   
    matchLabels:
      app: telegraf
  replicas: 1
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      initContainers:
      - name: init-telegraf
        image: telegraf:1.26.1
        command: ["sh","-c"]
        args:
          - |
            sed 's/"/\\"/g' /tmp/telegraf/telegraf.conf > /etc/telegraf/escaped_telegraf.conf
            echo "$(eval "echo \"$(cat /etc/telegraf/escaped_telegraf.conf)\"")" > /etc/telegraf/telegraf.conf
            chmod u+rw /etc/telegraf/telegraf.conf
        env: 
        - name: USERNAME_INFLUX
          valueFrom:
            secretKeyRef:
              name: telegraf-influx-secret
              key: usernameInflux   
        - name: PASSWORD_INFLUX
          valueFrom:
            secretKeyRef:
              name: telegraf-influx-secret
              key: passwordInflux
        volumeMounts:
        - name: telegraf-config-vol
          mountPath: /etc/telegraf/
        - name: config-vol
          mountPath: /tmp/telegraf/
      containers:
      - name: telegraf
        image: telegraf:1.26.1
        volumeMounts:
        - name: telegraf-config-vol
          mountPath: /etc/telegraf/
      volumes:
      - name: telegraf-config-vol
        emptyDir: {}
      - name: config-vol
        configMap:
          name: telegraf-config
