apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-config
  namespace: influx
data:
  telegraf.conf: |
    # Configuration for telegraf agent
    [agent]
      ## Default data collection interval for all inputs
      interval = {{ .Values.global.telegraf.interval | quote}}
      ## Rounds collection interval to 'interval'
      ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
      round_interval = true

      ## Telegraf will send metrics to outputs in batches of at most
      ## metric_batch_size metrics.
      ## This controls the size of writes that Telegraf sends to output plugins.
      metric_batch_size = {{ .Values.global.telegraf.metricBatchSize }}

      ## Maximum number of unwritten metrics per output.  Increasing this value
      ## allows for longer periods of output downtime without dropping metrics at the
      ## cost of higher maximum memory usage.
      metric_buffer_limit = {{ .Values.global.telegraf.metricBufferLimit }}

      ## Collection jitter is used to jitter the collection by a random amount.
      ## Each plugin will sleep for a random time within jitter before collecting.
      ## This can be used to avoid many plugins querying things like sysfs at the
      ## same time, which can have a measurable effect on the system.
      collection_jitter = {{ .Values.global.telegraf.collectionJitter | quote}}

      ## Default flushing interval for all outputs. Maximum flush_interval will be
      ## flush_interval + flush_jitter
      flush_interval = {{ .Values.global.telegraf.flushInterval | quote }}
      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = {{ .Values.global.telegraf.flushJitter | quote }}

      ## By default or when set to "0s", precision will be set to the same
      ## timestamp order as the collection interval, with the maximum being 1s.
      ##   ie, when interval = "10s", precision will be "1s"
      ##       when interval = "250ms", precision will be "1ms"
      ## Precision will NOT be used for service inputs. It is up to each individual
      ## service input to set the timestamp at the appropriate precision.
      ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
      precision = {{ .Values.global.telegraf.precision | quote }}

      ## Log at debug level.
      debug = false
      ## Log only error level messages.
      quiet = false

      ## Log target controls the destination for logs and can be one of "file",
      ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
      ## is determined by the "logfile" setting.
      # logtarget = "file"

      ## Name of the file to be logged to when using the "file" logtarget.  If set to
      ## the empty string then logs are written to stderr.
      # logfile = "/var/log/telegraf/telegraf.log"

      ## The logfile will be rotated after the time interval specified.  When set
      ## to 0 no time based rotation is performed.  Logs are rotated only when
      ## written to, if there is no log activity rotation may be delayed.
      logfile_rotation_interval = "1d"

      ## The logfile will be rotated when it becomes larger than the specified
      ## size.  When set to 0 no size based rotation is performed.
      logfile_rotation_max_size = "200MB"

      ## Maximum number of rotated archives to keep, any older logs are deleted.
      ## If set to -1, no archives are removed.
      logfile_rotation_max_archives = 5

      ## Override default hostname, if empty use os.Hostname()
      hostname = ""
      ## If set to true, do no set the "host" tag in the telegraf agent.
      omit_hostname = true

    # Configuration for sending metrics to InfluxDB
    [[outputs.influxdb_v2]]
      ## The URLs of the InfluxDB cluster nodes.
      ##
      ## Multiple URLs can be specified for a single cluster, only ONE of the
      ## urls will be written to each interval.
      ## urls exp: http://127.0.0.1:8086
      urls = ["http://influxdb.influx.svc:8086"]

      ## Token for authentication.
      token = "{{ .Values.global.influxAdminToken }}"

      ## Organization is the name of the organization you wish to write to; must exist.
      organization = "{{ .Values.global.influxOrg }}"

      ## Destination bucket to write into.
      bucket = "{{ .Values.global.influxBucket }}"
        
    [[inputs.kafka_consumer]]
      brokers = ["{{ .Values.global.internalKafkaFqdn }}:{{ .Values.global.internalKafkaPort }}"]
      topics = ["data"]
      json_string_fields = ["value", "agent"]
      version = "2.8.0"
      consumer_group = "_telegraf_InfluxDBv1.8_consumers"
      offset = "newest"
      max_message_len = 1000000
      data_format = "json"